Introduction to the language
Week 1, day 1

Serhii Herasymov
SoftServe
sgeras@softserveinc.com





* What is Go?

"Go (often referred to as golang) is an open source programming language
created at Google in 2007 by Robert Griesemer, Rob Pike, and Ken Thompson. It
is a compiled, statically typed language in the tradition of Algol and C, with
garbage collection, limited structural typing, memory safety features and
CSP-style concurrent programming features added."

.link https://en.wikipedia.org/wiki/Go_(programming_language) Go Programming Language @ Wikipedia





* Language genesis

Design began in late 2007.

Key players:
- Robert Griesemer, Rob Pike, Ken Thompson
- Later: Ian Lance Taylor, Russ Cox

Became open source in November 2009.

Developed entirely in the open; very active community. 
Language stable as of Go 1, early 2012.





* What is structured programming?

Existed long before all of you were born

Elements:
- Control structures
- Subroutines
- Blocks





* What is static typisation?

- A language is statically typed if the type of a variable is known at compile time.
- Opposite: a language is dynamically typed if the type is associated with run-time values
- All kinds of type checking can be done by the compiler
- Other examples of static typed languages: Java, C++, Haskell





* Basic data types

* Basic data types: integers

- uint8
- uint16
- uint32
- uint64
- int8
- int16
- int32
- int64

8, 16, 32 and 64 tell us how many bits each of the types use

byte (rune) is a uint8

Please use int if opposite is not required. Int is machine-dependent





* Basic data types: floating point numbers

Floating point types:

- float32
- float64

Types for representing complex numbers (numbers with imaginary parts):

- complex64
- complex128

We should use float64 when working with floating point numbers





* Basic data types: booleans

Boolean is a 1-bit integer type representing true or false

Logical operators are used with boolean values:

.html ./boolean-operators.html





* Basic data types: strings

String is a sequence of characters with a definite length used to represent text

Go strings are made up of individual bytes, usually one for each character

Strings are indexed, starting from 0

(+) is a built-in concatenating operator

Strings ARE immutable, so you can't shoot your leg with pleasure





* Constants

* Constants

Constants are expressions whose value is known to the compiler and whose evaluation is guaranteed to occur at compile time, not at run time.
The underlying type of each constant is a basic type: boolean, string, number.

Constant declaration:

    const pi = 3.1415

Constant declaration in a block:

    const (
        e               = 2.71828
        apÃ©ry           = 1.2020569
        eulerMascheroni = 0.57721
    )

* Constants

Magic declaration:

    const (
        a = 1
        b
        c = 2
        d
    )

    fmt.Println(a, b, c, d) // => 1, 1, 2, 2

* Constants: iota

iota is a constant generator, used to create a sequence of related values without spelling out each one explicitly.

Classic exmaple:

    type Weekday int

    const (
        Sunday Weekday = iota
        Monday
        Tuesday
        Wednesday
        Thursday
        Friday
        Saturday
    )




* Assignability

A value x is assignable to a variable of type T ("x is assignable to T") in any of these cases:

- x's type is identical to T.
- x's type V and T have identical underlying types and at least one of V or T is not a named type.
- T is an interface type and x implements T.
- x is a bidirectional channel value, T is a channel type, x's type V and T have identical element types, and at least one of V or T is not a named type.
- x is the predeclared identifier nil and T is a pointer, function, slice, map, channel, or interface type.
- x is an untyped constant representable by a value of type T.




* Composite types

* Composite types: Arrays

An array is a numbered sequence of elements of a single type with a fixed length.
They look like this:

    var arr [4]int

In memory it's looking like this:

.image ./array-memory-representation.png

Go's arrays are values. An array variable denotes the entire array.
It is not a pointer to the first array element.
When you assign or pass around an array value you will make a copy of its contents




* Composite types: Slices

Slice type has no specified length
Slice declaration:

    sl := []int{1, 2, 3, 4, 5}

Slice can be created with make function, which receives slice length and capacity

    	var s []int
    	s = make([]int, 5, 10)
    	s[2] = 1
    	fmt.Println(s) // => [0 0 1 0 0]

Length and capacity of the slice can be accepted with cap() and len() functions:

        len(s) // => 5
        cap(s) // => 10




* Composite types: Slicing slices

A slice can also be formed by "slicing" an existing slice or array.
Slicing is done by specifying a half-open range with two indices separated by a colon:

    b := []byte{'g', 'o', 'l', 'a', 'n', 'g'}
    // b[1:4] is []byte{'o', 'l', 'a'}

The start and end indices of a slice expression are optional:

    b[:2] is []byte{'g', 'o'}
    b[2:] is []byte{'l', 'a', 'n', 'g'}
    b[:]  is b






* Composite types: Slice internals

.html ./slice-internals.html




* Composite types: Growing slices

To increase the capacity of a slice one must create a new, larger slice and copy the contents of the original slice into it:

    t := make([]byte, len(s), (cap(s)+1)*2)
    for i := range s { t[i] = s[i] }
    s = t

Using copy(), we can simplify the code snippet above:

    t := make([]byte, len(s), (cap(s)+1)*2)
    copy(t, s)
    s = t

The append() adds the elements x to the end of the slice s, and grows the slice if a greater capacity is needed:

    a := make([]int, 1)     // a is []int{0}
    a = append(a, 1, 2, 3)  // a is []int{0, 1, 2, 3}

* Composite types: Growing slices

To append one slice to another, use ... to expand the second argument to a list of arguments:

    a := []string{"John", "Paul"}
    b := []string{"George", "Ringo", "Pete"}

    a = append(a, b...) // equivalent to "append(a, b[0], b[1], b[2])"

    // a is []string{"John", "Paul", "George", "Ringo", "Pete"}





* Composite types: Maps

A map is an unordered collection of key-value pairs.
Declaring map:

    var m map[string]int

.image ./map-scheme.png

So we can go nuts:

    var mm map[string]map[string]map[string]int


* Composite types: Maps

Initialising a map:

    elements := map[string]string {
        "H":  "Hydrogen",
        "He": "Helium",
        "Li": "Lithium",
        "Be": "Beryllium",
        // ...
    }

More complex map initialisation:

    elementsAttributes := map[string]map[string]string{
        "H": map[string]string{
          "name":"Hydrogen",
          "state":"gas",
        },
        "He": map[string]string{
          "name":"Helium",
          "state":"gas",
        },
        // ...
    }


* Composite types: Maps

We can add key-pair to a map:

    elements["C"] = "Carbon"

You can examine element existence with:

    element, ok := elements["He"]
    if ok {
        println(element)
    }

Use delete() to delete key-pair:

    delete(elements, "He")





* Composite types: Structs

A struct is a type which contains named fields.

Example struct declaration:

    type Rectangular struct {
        Width int
        Height int
    }

Short declaration:

    type Rectangular struct {
        Width, Height int
    }

Anonymous structure declaration:

    var rect = struct {
        Width, Height int
    } { 1, 2 }


* Composite types: Structs - initialisation

We can create an instance of our new Rectangular type in a variety of ways:

    var r Rectangular

This will create a local Rectangular variable that is by default set to zero.

To allocate memory for all the fields, set each of them to their zero value and returns a pointer (*Rectangular):

    r := new(Rectangular)

More often we want to give each of the fields a value:

    r := Rectangular{Width: 200, Height: 300}

Or we can leave off the field names if we know the order they were defined:

    r := Rectangular{200, 300}


* Composite types: Structs - fields

We can access fields using the . operator:

    println(r.Width)
    r.Width = 420

.image ./tim-and-eric-mind-blown.gif